"use strict";(globalThis.webpackChunkmy_docs=globalThis.webpackChunkmy_docs||[]).push([[8797],{3046:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>a,contentTitle:()=>c,default:()=>p,frontMatter:()=>r,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"docs/test_readme/utils-test","title":"\ud83e\uddea Utils Test Suite","description":"Overview","source":"@site/docs/docs/test_readme/utils-test.md","sourceDirName":"docs/test_readme","slug":"/docs/test_readme/utils-test","permalink":"/docs/docs/test_readme/utils-test","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/docs/test_readme/utils-test.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"\ud83d\udef0\ufe0f Satellite Module Test Suite","permalink":"/docs/docs/test_readme/satellite-test"},"next":{"title":"\ud83e\uddf0 util.js \u2014 Utility Functions for Heavens-Above Requests","permalink":"/docs/docs/utils"}}');var o=n(4848),i=n(8453);const r={},c="\ud83e\uddea Utils Test Suite",a={},l=[{value:"Overview",id:"overview",level:2},{value:"\ud83d\udcc4 Test Source Code",id:"-test-source-code",level:2},{value:"\u2705 Summary",id:"-summary",level:2},{value:"\ud83e\uddfe Notes",id:"-notes",level:2}];function d(e){const t={code:"code",h1:"h1",h2:"h2",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.header,{children:(0,o.jsx)(t.h1,{id:"-utils-test-suite",children:"\ud83e\uddea Utils Test Suite"})}),"\n",(0,o.jsx)(t.h2,{id:"overview",children:"Overview"}),"\n",(0,o.jsxs)(t.p,{children:["This file contains Jest tests for the ",(0,o.jsx)(t.code,{children:"utils"})," module, covering:"]}),"\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsx)(t.li,{children:"Timestamp conversion"}),"\n",(0,o.jsx)(t.li,{children:"MD5 hashing"}),"\n",(0,o.jsx)(t.li,{children:"HTTP options generators"}),"\n",(0,o.jsx)(t.li,{children:"URL encoding behavior"}),"\n"]}),"\n",(0,o.jsx)(t.hr,{}),"\n",(0,o.jsx)(t.h2,{id:"-test-source-code",children:"\ud83d\udcc4 Test Source Code"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-js",children:"const utils = require('../src/utils');\nconst crypto = require('crypto');\n\n// \ud83d\udd39 Mock crypto so we don\u2019t do real hashing\njest.mock('crypto', () => ({\n  createHash: jest.fn().mockReturnThis(),\n  update: jest.fn().mockReturnThis(),\n  digest: jest.fn().mockReturnValue('mocked-md5-hash')\n}));\n\ndescribe('Utils', () => {\n  describe('getTimestamp', () => {\n    test('should convert time string to seconds', () => {\n      expect(utils.getTimestamp('12:30:45')).toBe(45045);\n      expect(utils.getTimestamp('01:05:00')).toBe(3900);\n      expect(utils.getTimestamp('00:00:00')).toBe(0);\n    });\n\n    test('should handle time without seconds', () => {\n      expect(utils.getTimestamp('12:30')).toBe(45000);\n    });\n  });\n\n  describe('md5', () => {\n    test('should generate MD5 hash using crypto', () => {\n      const hash = utils.md5('test-string');\n\n      expect(crypto.createHash).toHaveBeenCalledWith('md5');\n      expect(crypto.update).toHaveBeenCalledWith('test-string');\n      expect(crypto.digest).toHaveBeenCalledWith('hex');\n      expect(hash).toBe('mocked-md5-hash');\n    });\n  });\n\n  describe('HTTP options generators', () => {\n    const baseUrl = 'https://www.heavens-above.com/';\n    const expectedHeaders = {\n      'Host': 'www.heavens-above.com',\n      'Connection': 'keep-alive',\n      'User-Agent':\n        'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/12.0 Safari/605.1.15',\n      'DNT': '1',\n      'Accept':\n        'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',\n      'Accept-Encoding': 'deflate, br',\n      'Accept-Language': 'zh-CN,zh;q=0.9,en;q=0.8',\n      'Cookie':\n        'ASP.NET_SessionId=4swouj1mkd2nburls12t5ryx; preferences=showDaytimeFlares=True; userInfo=lat=39.9042&lng=116.4074&alt=52&tz=ChST&loc=%e5%8c%97%e4%ba%ac%e5%b8%82'\n    };\n\n    test('get_options should return GET configuration', () => {\n      const target = 'PassSummary.aspx?';\n      const options = utils.get_options(target);\n\n      expect(options.method).toBe('GET');\n      expect(options.url).toContain(baseUrl + target);\n      expect(options.url).toContain('lat=39.9042');\n      expect(options.url).toContain('lng=116.4074');\n      expect(options.url).toContain('loc=%E5%8C%97%E4%BA%AC%E5%B8%82');\n      expect(options.headers).toEqual({\n        ...expectedHeaders,\n        'Upgrade-Insecure-Requests': '1' // \u2705 Added to match real behavior\n      });\n    });\n\n    test('post_options should return POST configuration', () => {\n      const target = 'IridiumFlares.aspx?';\n      const body = 'test=value&another=param';\n      const options = utils.post_options(target, body);\n\n      expect(options.method).toBe('POST');\n      expect(options.body).toBe(body);\n      expect(options.json).toBe(true);\n      expect(options.headers).toEqual({\n        ...expectedHeaders,\n        'Cache-Control': 'max-age=0',\n        'Origin': 'https://www.heavens-above.com',\n        'Upgrade-Insecure-Requests': '1',\n        'Content-Type': 'application/x-www-form-urlencoded'\n      });\n    });\n\n    test('image_options should return GET configuration for images', () => {\n      const url = 'https://www.heavens-above.com/image.png';\n      const options = utils.image_options(url);\n\n      expect(options.method).toBe('GET');\n      expect(options.url).toBe(url);\n      expect(options.headers).toEqual({\n        ...expectedHeaders,\n        'Upgrade-Insecure-Requests': '1'\n      });\n    });\n\n    test('iridium_options should return GET configuration for Iridium', () => {\n      const url = 'https://www.heavens-above.com/IridiumFlares.aspx';\n      const options = utils.iridium_options(url);\n\n      expect(options.method).toBe('GET');\n      expect(options.url).toBe(url);\n      expect(options.headers).toEqual({\n        ...expectedHeaders,\n        'Cache-Control': 'max-age=0',\n        'Upgrade-Insecure-Requests': '1'\n      });\n    });\n  });\n\n  describe('URL encoding', () => {\n    test('should properly encode Chinese characters in URLs', () => {\n      const options = utils.get_options('test.aspx?');\n      expect(options.url).toContain('loc=%E5%8C%97%E4%BA%AC%E5%B8%82');\n    });\n  });\n});\n"})}),"\n",(0,o.jsx)(t.hr,{}),"\n",(0,o.jsx)(t.h2,{id:"-summary",children:"\u2705 Summary"}),"\n",(0,o.jsx)(t.p,{children:"This suite ensures:"}),"\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.strong,{children:"Timestamp parsing"})," works for ",(0,o.jsx)(t.code,{children:"HH:MM"})," and ",(0,o.jsx)(t.code,{children:"HH:MM:SS"}),"."]}),"\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.strong,{children:"MD5 hashing"})," is executed with proper crypto methods (mocked)."]}),"\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.strong,{children:"HTTP options"})," correctly replicate browser headers and parameters."]}),"\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.strong,{children:"URL encoding"})," properly converts Chinese characters."]}),"\n"]}),"\n",(0,o.jsx)(t.hr,{}),"\n",(0,o.jsx)(t.h2,{id:"-notes",children:"\ud83e\uddfe Notes"}),"\n",(0,o.jsx)(t.p,{children:"Run with:"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-bash",children:"jest utils.test.js\n"})}),"\n",(0,o.jsxs)(t.p,{children:["Ensure your environment includes Jest and that ",(0,o.jsx)(t.code,{children:"../src/utils"})," exports the expected functions."]})]})}function p(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>c});var s=n(6540);const o={},i=s.createContext(o);function r(e){const t=s.useContext(i);return s.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),s.createElement(i.Provider,{value:t},e.children)}}}]);